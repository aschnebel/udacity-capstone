pipeline {
  agent any
  environment {
    registry = 'schnebelalexander/capstone'
  }
  stages {
    stage('Lint HTML') {
      steps {
        sh 'tidy -q -e **/*.html'
      }
    }

    stage('Build Docker Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER')]) {
          sh '''
            docker build -t $registry deployment/
          '''
        }
      }
    }

    stage('Push Docker Image to Dockerhub') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER')]) {
					sh '''
						docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
						docker push $registry
					'''
				}
      }
    }

    stage('Set Current Kubectl Context') {
      steps {
        withAWS(credentials: 'aws_credentials', region: 'eu-central-1') {
          sh 'kubectl config use-context arn:aws:eks:eu-central-1:797071288599:cluster/capstone-cluster'
        }
      }
    }

    stage('Deploy Blue container') {
      steps {
        withAWS(credentials: 'aws_credentials', region: 'eu-central-1') {
          sh 'kubectl apply -f ./deployment/blue-controller.yaml'
        }
      }
    }

    stage('Deploy Green container') {
      steps {
        withAWS(credentials: 'aws_credentials', region: 'eu-central-1') {
          sh 'kubectl apply -f ./deployment/green-controller.yaml'
        }
      }
    }

    stage('Create Service, redirect to blue') {
      steps {
        withAWS(credentials: 'aws_credentials', region: 'eu-central-1') {
          sh 'kubectl apply -f ./deployment/blue-service.yaml'
        }
      }
    }

    stage('Approval') {
      steps {
        input 'Ready to redirect traffic to green?'
      }
    }

    stage('Create Service, redirect to green') {
      steps {
        withAWS(credentials: 'aws_credentials', region: 'eu-central-1') {
          sh 'kubectl apply -f ./deployment/green-service.yaml'
        }
      }
    }
  }
}